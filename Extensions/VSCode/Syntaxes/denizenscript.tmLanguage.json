{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Denizen Script",
	"patterns": [
		{
			"include": "#header_comments"
		},
		{
			"include": "#code_comments"
		},
		{
			"include": "#keycode_comments"
		},
		{
			"include": "#keycode_comments_AFTER"
		},
		{
			"include": "#Rfancy_comments"
		},
		{
			"include": "#Yfancy_comments"
		},
		{
			"include": "#normal_comments"
		},
		{
			"include": "#yaml_key"
		},
		{
			"include": "#yaml_key_inline"
		},
		{
			"include": "#code_line"
		},
		{
			"include": "#quote_line"
		}
	],
	"repository": {
		"header_comments": {
			"patterns": [{
				"name": "dscript.comment.header",
				"match": "^\\s*#\\s*[\\|+=].*$"
			}]
		},
		"_comment": "# - Command code comment  Decent Regex covers entire line and is ^\\s*#\\s*-.*$    starter regex is  ^\\s*#\\s*-\\s+[a-z]* that needs gray fixing",
		"code_comments": {
			"patterns": [{
				"name": "dscript.comment.code",
				"match": "^\\s*#\\s*-.*$"
			}]
		},
		"_comment": "# Yaml_Key: yaml key data  decent regex is ^\\s*#.*(:).*$",
		"keycode_comments": {
			"patterns": [{
				"name": "dscript.comment.keycode",
				"match": "^\\s*#.*(:).*$"
			}]
		},
		"Rfancy_comments": {
			"patterns": [{
				"name": "dscript.comment.Rfancy",
				"match": "^\\s*#\\s*[\\$+=].*$"
			}]
		},
		"Yfancy_comments": {
			"patterns": [{
				"name": "dscript.comment.Yfancy",
				"match": "^\\s*#\\s*[\\%+=].*$"
			}]
		},
		"normal_comments": {
			"patterns": [{
				"name": "dscript.comment.normal",
				"match": "^\\s*#.*$"
			}]
		},
		"_comment": "^[^-#:]*(:)$ mcmonkey and me (^[^\\s#:]*(:)|'([^\"]*)'(:)|\"([^']*)\"(:))",
		"yaml_key": {
			"patterns": [{
				"name": "dscript.key",
				"match": "^[^-#:]*(:)$",
				"captures": {
					"1": {
						"name": "dscript.key.colons"
					}
				}
			}]
		},
		"_comment": "^[^-#:]*(:) mcmonkey",
		"yaml_key_inline": {
			"patterns": [{
				"name": "dscript.key.inline",
				"match": "^[^-#:]*(:)",
				"captures": {
					"1": {
						"name": "dscript.key.colons"
					}
				}
			}]
		},
		"code_line_quotes_tags": {
			"patterns": [{
				"begin": "\"",
				"end": "\"",
				"name": "dscript.quotes",
				"patterns": [{
					"include": "#code_line_tags"
				}]
			}]
		},
		"code_line_single_quotes_tags": {
			"patterns": [{
				"begin": "'",
				"end": "'",
				"name": "dscript.quotes",
				"patterns": [{
					"include": "#code_line_tags"
				}]
			}]
		},
		"code_line_tags_params": {
			"patterns": [{
				"begin": "\\[",
				"end": "\\]",
				"name": "dscript.tag_params",
				"patterns": [{
					"include": "#code_line_tags"
				}]
			}]
		},
		"code_line_tags_dots": {
			"patterns": [{
				"name": "dscript.tag_dots",
				"match": "\\."
			}]
		},
		"code_line_colons": {
			"patterns": [{
				"name": "dscript.code_line.colons",
				"match": ":.*\n"
			}]
		},
		"code_line_tags": {
			"patterns": [{
				"begin": "<",
				"end": ">",
				"name": "dscript.tags",
				"patterns": [{
					"include": "#code_line_tags_params"
				},
				{
					"include": "#code_line_tags_dots"
				}]
			}]
		},
		"code_line": {
			"patterns": [{
				"begin": "^\\s*-\\s([^'\"][^\\s]*)",
				"end": "$",
				"name": "dscript.code_line",
				"beginCaptures": {
					"1": {
						"name": "dscript.command"
					}
				},
				"patterns": [{
					"include": "#code_line_quotes_tags"
				},
				{
					"include": "#code_line_single_quotes_tags"
				},
				{
					"include": "#code_line_tags"
				},
				{
					"include": "#code_line_colons"
				}]
			}]
		},
		"quote_line": {
			"patterns": [{
				"begin": "^\\s*-\\s(['\"].*['\"])$",
				"end": "$",
				"name": "dscript.code_line",
				"beginCaptures": {
					"1": {
						"name": "dscript.quotes"
					}
				}
			}]
		}
	},
	"scopeName": "source.denizen"
}
